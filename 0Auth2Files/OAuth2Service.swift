import UIKit
import Foundation

final class OAuth2Service {
    
    // MARK: - –°–∏–Ω–≥–ª—Ç–æ–Ω
    static let shared = OAuth2Service()
    private let baseURL = "https://unsplash.com/oauth/token"
    private let storage = OAuth2TokenStorage()
    private let urlSession = URLSession.shared
    private var task: URLSessionTask?
    private var lastCode: String?

    private init() {}
    
    
        
        // MARK: - –ó–∞–ø—Ä–æ—Å –¢–æ–∫–µ–Ω–∞
    func makeOAuthTokenRequest(code: String) -> URLRequest? {
        // –û–±—ä—è–≤–ª—è—é –±–∞–∑–æ–≤—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å—Ö–µ–º—ã –∏ –∏–º–µ–Ω–∏
        guard let baseURL = URL(string: "https://unsplash.com") else {
            assertionFailure("Invalid base URL")
            return nil
        }
        
        // –ü–æ–ª—É—á–µ–Ω–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ URL , —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ URL, –ø—É—Ç–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç)
        var components = URLComponents()
        components.scheme = baseURL.scheme
        components.host = baseURL.host
        components.path = "/oauth/token"
        
        components.queryItems = [
            URLQueryItem(name: "client_id", value: Constants.accessKey),
            URLQueryItem(name: "client_secret", value: Constants.secretKey),
            URLQueryItem(name: "redirect_uri", value: Constants.redirectURI),
            URLQueryItem(name: "code", value: code),
            URLQueryItem(name: "grant_type", value: "authorization_code")
        ]
        // –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ —Å–≤–æ–π—Å—Ç–≤—É url —É —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ URLComponents
        guard let url = components.url else {
            fatalError("Failed to construct URL from components")
        }
        
        // –°–æ–∑–¥–∞–Ω URLRequest –∏ –∑–∞–¥–∞–Ω–∏–µ –µ–º—É –º–µ—Ç–æ–¥–∞ Post –≤ —Å–≤–æ–π—Å–≤—Ç–µ httpMethod
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        return request
    }
    
    enum OAuthError: Error {
        case invalidRequest
        case networkError(Error)
        case invalidHTTPResponse
        case invalidStatusCode(Int)
        case invalidData
        case decodingFailed(Error)
        
    }
    
        // MARK: - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    func fetchAuthToken(_ code: String, completion: @escaping (Result<String, Error>) -> Void) {
          assert(Thread.isMainThread)                         // 4
          if task != nil {                                    // 5
              if lastCode != code {                           // 6
                  task?.cancel()                              // 7
              } else {
                  completion(.failure(OAuthError.invalidRequest))
                  return                                      // 8
              }
          } else {
              if lastCode == code {                           // 9
                  completion(.failure(OAuthError.invalidRequest))
                  return
              }
          }
          lastCode = code                                     // 10
          guard
              let request = makeOAuthTokenRequest(code: code)           // 11
          else {
              completion(.failure(OAuthError.invalidRequest))
              return
          }
        
        let task = URLSession.shared.dataTask(with: request) { [weak self] data, response, error in guard let self = self else { return }
            if let error = error {
                DispatchQueue.main.async {
                    completion(.failure(OAuthError.networkError(error)))
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", error.localizedDescription)
                }
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                DispatchQueue.main.async {
                    completion(.failure(OAuthError.invalidHTTPResponse))
                    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTP-–æ—Ç–≤–µ—Ç")
                }
                return
            }
            
            print("üì• –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", httpResponse.statusCode)
            
            guard (200..<300).contains(httpResponse.statusCode) else {
                DispatchQueue.main.async {
                    completion(.failure(OAuthError.invalidStatusCode(httpResponse.statusCode)))
                    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ \(httpResponse.statusCode)")
                }
                return
            }
            
            guard let data = data else {
                DispatchQueue.main.async {
                    completion(.failure(OAuthError.invalidData))
                    print("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                }
                return
            }
            
            print("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", String(data: data, encoding: .utf8) ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            if let jsonString = String(data: data, encoding: .utf8) {
                print("jsonString: \(jsonString)")
            } else {
                print("Error: invalid JSON")
            }
            do {
                let decoder = JSONDecoder()
                print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON:", String(data: data, encoding: .utf8) ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                print("üì• JSON –ø–µ—Ä–µ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º:", String(data: data, encoding: .utf8) ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                
                let responseBody = try decoder.decode(OAuthTokenResponseBody.self, from: data)
                
                print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:", responseBody.accessToken)
                self.storage.token = responseBody.accessToken
                
                DispatchQueue.main.async {
                    completion(.success(responseBody.accessToken))
                }
            } catch {
                DispatchQueue.main.async {
                    completion(.failure(OAuthError.decodingFailed(error)))
                    print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON:", error.localizedDescription)
                }
                self.task = nil
                self.lastCode = nil
            }
        }
        self.task = task
        task.resume()
    }
    
}
